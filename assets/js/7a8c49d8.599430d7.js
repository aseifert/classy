"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[487],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return p}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=c(n),p=r,f=m["".concat(s,".").concat(p)]||m[p]||d[p]||i;return n?a.createElement(f,o(o({ref:t},u),{},{components:n})):a.createElement(f,o({ref:t},u))}));function p(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8646:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},assets:function(){return u},toc:function(){return d},default:function(){return p}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=["components"],l={sidebar_position:1,title:"Overall Structure"},s=void 0,c={unversionedId:"reference-manual/structured-configs/overall-structure",id:"reference-manual/structured-configs/overall-structure",title:"Overall Structure",description:"In classy, we specify every detail of training and model configurations through nice .yaml files,",source:"@site/docs/reference-manual/structured-configs/overall-structure.md",sourceDirName:"reference-manual/structured-configs",slug:"/reference-manual/structured-configs/overall-structure",permalink:"/classy/docs/reference-manual/structured-configs/overall-structure",editUrl:"https://github.com/sunglasses-ai/classy/edit/main/docs/reference-manual/structured-configs/overall-structure.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Overall Structure"},sidebar:"tutorialSidebar",previous:{title:"describe",permalink:"/classy/docs/reference-manual/cli/describe"},next:{title:"Changing Config",permalink:"/classy/docs/reference-manual/structured-configs/changing-config"}},u={},d=[{value:"A Minimal Example",id:"a-minimal-example",level:2},{value:"Full Structure",id:"full-structure",level:2}],m={toc:d};function p(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"In ",(0,i.kt)("inlineCode",{parentName:"p"},"classy"),", we specify every detail of training and model configurations through nice ",(0,i.kt)("inlineCode",{parentName:"p"},".yaml")," files,\nusing the amazing ",(0,i.kt)("a",{parentName:"p",href:"https://hydra.cc/"},"Hydra")," library."),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"While you can read this section and work with classy config structure, without knowing Hydra, we recommend\ngoing through its ",(0,i.kt)("a",{parentName:"p",href:"https://hydra.cc/docs/tutorials/intro"},"tutorial")," before proceeding."))),(0,i.kt)("p",null,"This allows you to change and swap parts easily. For instance, imagine you have been fine-tuning BERT on some Token\nClassification task, with this configuration:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"<...>\ntransformer_model: bert-large-cased\nuse_last_n_layers: 1\nfine_tune: True\noptim_conf:\n  <...>\n")),(0,i.kt)("p",null,"If you wanted to give a try keeping BERT weights frozen, you can just go with:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"_target_: 'classy.pl_modules.hf.HFTokensPLModule'\ntransformer_model: bert-large-cased\nuse_last_n_layers: 1\nfine_tune: False\noptim_conf:\n  <...>\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"These ",(0,i.kt)("inlineCode",{parentName:"p"},".yaml")," files also help you to ",(0,i.kt)("strong",{parentName:"p"},"track")," what changes you made on some experiment as the configuration is saved alongside\nthe model in the experiment folder."))),(0,i.kt)("h2",{id:"a-minimal-example"},"A Minimal Example"),(0,i.kt)("p",null,"However, if you were to specify every aspect of your experiment in a single ",(0,i.kt)("inlineCode",{parentName:"p"},".yaml")," file, it would eventually become gigantic\nand pretty much useless. To avoid this, we use Hydra ",(0,i.kt)("em",{parentName:"p"},"config groups"),", which is just a fancy name to say that the\nexperiment details are grouped by functionality and stored inside dedicated folders. That is:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ tree -L 1 configurations/\nconfigurations/\n\u251c\u2500\u2500 data/\n\u2502   \u2514\u2500\u2500 token.yaml\n\u251c\u2500\u2500 model\n\u2502   \u2514\u2500\u2500 token.yaml\n\u251c\u2500\u2500 training\n\u2502   \u2514\u2500\u2500 token.yaml\n\u2514\u2500\u2500 root.yaml\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"data/token.yaml")," defines data-related configurations for your ",(0,i.kt)("strong",{parentName:"p"},"Token Classification")," experiment, while ",(0,i.kt)("inlineCode",{parentName:"p"},"model/token.yaml")," and\n",(0,i.kt)("inlineCode",{parentName:"p"},"training/token.yaml")," specify model (e.g. architecture) and training (e.g. gradient accumulation) aspects."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"root.yaml")," is the yaml ",(0,i.kt)("em",{parentName:"p"},"orchestrator"),", that is, it defines global variables and specify which yaml file in each folder\nshould be used:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:"title=root.yaml",title:"root.yaml"},"# global variables\ntask: token\nproject_name: classy\n<...>\n\n# here specify yaml file to use for each config group\n# syntax: the name of the file (without .yaml extension) contained in the corresponding folder\ndefaults:\n  - data: token\n  - model: token\n  - logging: default\n  - _self_  # this is some hydra-specific machinery (you can ignore it, but leave it at the end of the defaults list)\n")),(0,i.kt)("h2",{id:"full-structure"},"Full Structure"),(0,i.kt)("p",null,"As a matter of fact, there are quite a few details more ",(0,i.kt)("inlineCode",{parentName:"p"},"data/"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"model/")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"train/")," that you would want to specify.\nThus, the actual structure of the config groups is the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ tree -L 1 configurations/\nconfigurations/\n\u251c\u2500\u2500 callbacks/          # used to define callbacks that are executed during training (at precise steps, like every end of validation)\n\u251c\u2500\u2500 data/               # data-related configuration (e.g. PyTorch Dataset)\n\u251c\u2500\u2500 model/              # model-related configuration (e.g. architecture)\n\u251c\u2500\u2500 prediction/         # data-configuration to be used at prediction time\n\u2514\u2500\u2500 training/           # training configuration\n")),(0,i.kt)("p",null,"Besides, there are 5 root ",(0,i.kt)("inlineCode",{parentName:"p"},".yaml")," files already defined, one for each task:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"qa.yaml")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"sentence-pair.yaml")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"sequence.yaml")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"token.yaml")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"generation.yaml"))),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"If you manually inspect the ",(0,i.kt)("inlineCode",{parentName:"p"},"configurations/")," folder, you'll see there are 3 additional folders: ",(0,i.kt)("inlineCode",{parentName:"p"},"device/"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"logging/")," and\n",(0,i.kt)("inlineCode",{parentName:"p"},"profiles/"),". You can safely ignore the first two, and we cover ",(0,i.kt)("inlineCode",{parentName:"p"},"profiles/")," in depth ",(0,i.kt)("a",{parentName:"p",href:"/docs/getting-started/customizing-things/changing-profile"},"here"),"."))))}p.isMDXComponent=!0}}]);